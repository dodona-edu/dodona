{
  "$ref": "#/definitions/update",
  "definitions": {
    "update": {
      "oneOf": [
          { "$ref": "#/definitions/focus" },
          { "$ref": "#/definitions/push-focus" },
          { "$ref": "#/definitions/pop-focus" },
          { "$ref": "#/definitions/focus-relative" },
          { "$ref": "#/definitions/new-tab" },
          { "$ref": "#/definitions/new-context" },
          { "$ref": "#/definitions/new-testcase" },
          { "$ref": "#/definitions/new-test" },

          { "$ref": "#/definitions/append-message" },
          { "$ref": "#/definitions/set-properties" },
          { "$ref": "#/definitions/increment-badgecount" }
      ]
    },
    "focus": {
        "type": "object",
        "description": "Move the focus to the specified location.",
        "required": ["command"],
        "properties": {
            "command":  { "enum": ["focus"] },
            "tab":      { "$ref": "#/definitions/index" },
            "context":  { "$ref": "#/definitions/index" },
            "testcase": { "$ref": "#/definitions/index" },
            "test":     { "$ref": "#/definitions/index" }
        }
    },
    "push-focus": {
        "type": "object",
        "description": "Save the current focus on a stack.",
        "required": ["command"],
        "properties": {
            "command": { "enum": ["push-focus"] }
        }
    },
    "pop-focus": {
        "type": "object",
        "description": "Pop the last saved focus from a stack and use it.",
        "required": ["command"],
        "properties": {
            "command": { "enum": ["pop-focus"] }
        }
    },
    "focus-relative": {
        "type": "object",
        "description": "Move the focus to the relative level closer to root.",
        "required": ["command", "level"],
        "properties": {
            "command":  { "enum": ["focus-relative"] },
            "level":    { "enum": ["root", "tab", "context", "testcase", "test"] }
        }
    },
    "new-tab": {
        "type": "object",
        "description": "Open a new tab after the current tab (or as last tab if the root is focussed) and focus it.",
        "required": ["command"],
        "properties": {
            "command": { "enum": ["new-tab"] }
        }
    },
    "new-context": {
        "type": "object",
        "description": "Open a new context after the current context (or in the current tab) and focus it.",
        "required": ["command"],
        "properties": {
            "command": { "enum": ["new-context"] }
        }
    },
    "new-testcase": {
        "type": "object",
        "description": "Open a new testcase after the current testcase (or in the current context) and focus it.",
        "required": ["command"],
        "properties": {
            "command": { "enum": ["new-testcase"] }
        }
    },
    "new-test": {
        "type": "object",
        "description": "Open a new test after the current test (or in the current testcase) and focus it.",
        "required": ["command"],
        "properties": {
            "command": { "enum": ["new-test"] }
        }
    },

    "append-message": {
        "type": "object",
        "description": "Append a message to the first ancestor or the focussed item able to carry messages. Focus is on the new message.",
        "required": ["command", "message"],
        "properties": {
            "command": { "enum": ["append-message"] },
            "message": { "$ref": "#/definitions/message" }
        }
    },
    "set-properties": {
        "type": "object",
        "description": "Set properties of the current object.",
        "required": ["command"],
        "properties": {
            "command":     { "enum": ["set-properties"] },
            "status":      { "$ref": "#/definitions/status" },
            "description": { "$ref": "#/definitions/description" },
            "accepted":    { "$ref": "#/definitions/accepted" },
            "badgecount":  { "$ref": "#/definitions/badgecount" },
            "expected":    { "type": "string" },
            "generated":   { "type": "string" }
        }
    },
    "increment-badgecount": {
        "type": "object",
        "description": "Increment the badgecount of the current tab.",
        "required": ["command"],
        "properties": {
            "command": { "enum": ["increment-badgecount"] }
        }
    },

    "message": {
      "type": ["string", "object"],
      "description": "Possibly formatted string as a message to (some) users.",
      "required": ["format", "description"],
      "properties": {
        "format":      { "$ref": "#/definitions/format" },
        "description": { "$ref": "#/definitions/description" },
        "permission":  { "$ref": "#/definitions/permission" }
      }
    },
    "format": {
      "type": "string",
      "description": "Either 'plain' (or 'text'), 'html' (formatted), 'markdown' (formatted), 'code' or any programming language (highlighted)."
    },
    "permission": {
      "type": "string",
      "description": "To which level of user this message is visible.",
      "enum": [
        "student",
        "staff",
        "zeus"
      ]
    },
    "badgeCount": {
      "type": "number",
      "description": "Indicates the number of issues in this tab",
      "minimum": 0
    },
    "index": {
      "type": "number",
      "description": "Index in a list.",
      "minimum": 0
    },
    "description": {
      "type": "string"
    },
    "status": {
      "type": "string",
      "enum": [
        "compilation error",
        "runtime error",
        "memory limit exceeded",
        "time limit exceeded",
        "wrong", "wrong answer",
        "correct", "correct answer",
        "internal error"
      ]
    },
    "accepted": {
      "type": "boolean"
    }
  }
}
