{
  "$ref": "#/definitions/update",
  "definitions": {
    "update": {
      "oneOf": [
          { "$ref": "#/definitions/start-judgement" },
          { "$ref": "#/definitions/start-tab" },
          { "$ref": "#/definitions/start-context" },
          { "$ref": "#/definitions/start-testcase" },
          { "$ref": "#/definitions/start-test" },
          { "$ref": "#/definitions/append-message" },
          { "$ref": "#/definitions/annotate-code" },
          { "$ref": "#/definitions/escalate-status" },
          { "$ref": "#/definitions/close-test" },
          { "$ref": "#/definitions/close-testcase" },
          { "$ref": "#/definitions/close-context" },
          { "$ref": "#/definitions/close-tab" },
          { "$ref": "#/definitions/close-judgement" }
      ]
    },
    "start-judgement": {
        "type": "object",
        "description": "Start on a new judgement.",
        "required": ["command"],
        "properties": {
            "command": { "enum": ["start-judgement"] }
        }
    },
    "start-tab": {
        "type": "object",
        "description": "Start on a new tab with given title. Hidden if all contexts are accepted iff hidden.",
        "required": ["command", "title"],
        "properties": {
            "command":     { "enum": ["start-tab"] },
            "title":       { "type": "string" },
            "hidden":      { "type": "boolean" },
            "permission":  { "$ref": "#/definitions/permission" }
        }
    },
    "start-context": {
        "type": "object",
        "description": "Start on a new context.",
        "required": ["command"],
        "properties": {
            "command":     { "enum": ["start-context"] },
            "description": { "$ref": "#/definitions/message" }
        }
    },
    "start-testcase": {
        "type": "object",
        "description": "Start on a new testcase with given description",
        "required": ["command", "description"],
        "properties": {
            "command":     { "enum": ["start-testcase"] },
            "description": { "$ref": "#/definitions/message" }
        }
    },
    "start-test": {
        "type": "object",
        "description": "Start on a new test with given expected answer.",
        "required": ["command", "expected"],
        "properties": {
            "command":     { "enum": ["start-test"] },
            "expected":    { "type": "string" },
            "format":      { "$ref": "#/definitions/test-format" },
            "description": { "$ref": "#/definitions/message" },
            "channel":     { "type": "string" }
        }
    },
    "append-message": {
        "type": "object",
        "description": "Append a message to the open object.",
        "required": ["command", "message"],
        "properties": {
            "command": { "enum": ["append-message"] },
            "message": { "$ref": "#/definitions/message" }
        }
    },
    "annotate-code": {
        "type": "object",
        "description": "Annotate a piece of code.",
        "required": ["command", "row", "text"],
        "properties": {
            "command": { "enum": ["annotate-code"] },
            "row":     { "$ref": "#/definitions/index" },
            "column":  { "$ref": "#/definitions/index" },
            "text":    { "type": "string" },
            "externalUrl":  { "type": "string" },
            "type":    { "$ref": "#/definitions/severity" },
            "rows":    { "$ref": "#/definitions/index" },
            "columns": { "$ref": "#/definitions/index" }
        }
    },
    "escalate-status": {
        "type": "object",
        "description": "Change the global status for the worse.",
        "required": ["command", "status"],
        "properties": {
            "command": { "enum": ["escalate-status"] },
            "status":  { "$ref": "#/definitions/status" }
        }
    },
    "close-test": {
        "type": "object",
        "description": "Close the current test. Accepted iff status is correct, but you can overwrite this.",
        "required": ["command", "status", "generated"],
        "properties": {
            "command":   { "enum": ["close-test"] },
            "generated": { "type": "string" },
            "accepted":  { "type": "boolean" },
            "status":    { "$ref": "#/definitions/status" }
        }
    },
    "close-testcase": {
        "type": "object",
        "description": "Close the current testcase. Accepted iff all tests are accepted, but you can overwrite this.",
        "required": ["command"],
        "properties": {
            "command":  { "enum": ["close-testcase"] },
            "accepted": { "type": "boolean" }
        }
    },
    "close-context": {
        "type": "object",
        "description": "Close the current context. Accepted iff all testcases are accepted, but you can overwrite this.",
        "required": ["command"],
        "properties": {
            "command":  { "enum": ["close-context"] },
            "accepted": { "type": "boolean" },
            "data":     { "$ref": "#/definitions/data" }
        }
    },
    "close-tab": {
        "type": "object",
        "description": "Close the current tab. Badgecount is the number of not-accepted testcases, but you can overwrite this.",
        "required": ["command"],
        "properties": {
            "command":    { "enum": ["close-tab"] },
            "badgeCount": { "$ref": "#/definitions/badgeCount" }
        }
    },
    "close-judgement": {
        "type": "object",
        "description": "Close the current judgement. Accepted iff all contexts are accepted, status is the worst (highest in description) of all tests, summary is the last of all tests, but you can overwrite this.",
        "required": ["command"],
        "properties": {
            "command":  { "enum": ["close-judgement"] },
            "accepted": { "type": "boolean" },
            "status":   { "$ref": "#/definitions/status" }
        }
    },

    "message": {
      "type": ["string", "object"],
      "description": "Possibly formatted string as a message to (some) users.",
      "required": ["format", "description"],
      "properties": {
        "format":      { "$ref": "#/definitions/message-format" },
        "description": { "$ref": "#/definitions/description" },
        "permission":  { "$ref": "#/definitions/permission" }
      }
    },
    "test-format": {
      "type": "string",
      "description": "Indicates how to diff and show the test output (defaults to 'text').",
      "enum": [
        "text",
        "csv"
      ]
    },
    "message-format": {
      "type": "string",
      "description": "Either 'plain' (or 'text'), 'html' (formatted), 'markdown' (formatted), 'callout' (formatted) (or variants 'callout-info', 'callout-warning', 'callout-danger'), 'code' or any programming language (highlighted). Note that the HTML output is sanitised to prevent XSS issues. JavaScript, for example, is not allowed, but most other tags should work."
    },
    "permission": {
      "type": "string",
      "description": "To which level of user this message is visible.",
      "enum": [
        "student",
        "staff",
        "zeus"
      ]
    },
    "badgeCount": {
      "type": "number",
      "description": "Indicates the number of issues in this tab",
      "minimum": 0
    },
    "index": {
      "type": "number",
      "description": "A zero-based index.",
      "minimum": 0
    },
    "description": {
      "type": "string"
    },
    "status": {
      "type": "object",
      "description": "Describes the outcome of the judgement.",
      "required": ["enum"],
      "properties": {
        "enum":  { "$ref": "#/definitions/status-enum" },
        "human": { "type": "string" }
      }
    },
    "status-enum": {
      "type": "string",
      "enum": [
        "internal error",
        "compilation error",
        "memory limit exceeded",
        "time limit exceeded",
        "output limit exceeded",
        "runtime error",
        "wrong", "wrong answer",
        "correct", "correct answer"
      ]
    },
    "severity": {
      "type": "string",
      "enum": ["error", "warning", "info"]
    },
    "data": {
      "type": "object",
      "description": "Metadata, currently used to enable the Python Tutor (only works for Python).",
      "properties": {
        "statements": {
          "type": "string",
          "description": "Block of code which is pasted below the submission to run a context."
        },
        "stdin": {
          "type": "string",
          "description": "The stdin for this context, which will be provided to the Python Tutor."
        }
      }
    }
  }
}
