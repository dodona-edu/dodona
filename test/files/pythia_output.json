{
  "accepted": true,
  "groups": [
    {
      "badgeCount": 1,
      "data": {},
      "groups": [
        {
          "accepted": true
        },
        {
          "accepted": true,
          "description": "Some testcases",
          "data": {},
          "groups": [
            {
              "accepted": true
            },
            {
              "accepted": false,
              "tests": [
                {
                  "accepted": true,
                  "data": {}
                },
                {
                  "accepted": true,
                  "data": {},
                  "description": "Whether I like your code",
                  "messages": [
                    "I like your code"
                  ]
                },
                {
                  "accepted": true,
                  "data": {},
                  "description": "Test for XSS in messages",
                  "messages": [
                    "<script>alert('Tis but a scratch.')</script>"
                  ]
                },
                {
                  "accepted": false,
                  "data": {},
                  "description": "random error messages",
                  "messages": [
                    {
                      "format": "plain",
                      "description": "a simple message"
                    },
                    {
                      "format": "text",
                      "description": "a text message"
                    },
                    {
                      "format": "html",
                      "description": "<div>a message in a div</div>"
                    },
                    {
                      "format": "markdown",
                      "description": "# a big message"
                    },
                    {
                      "format": "callout",
                      "description": "# a big fancy message"
                    },
                    {
                      "format": "code",
                      "description": "while(!(succeed = try()));"
                    },
                    {
                      "format": "python",
                      "description": "print('hoi')"
                    },
                    {
                      "format": "whitespace",
                      "description": "   \t  \t   \n\t\n     \t\t  \t \t\n\t\n     \t\t \t\t  \n\t\n     \t\t \t\t  \n\t\n     \t\t \t\t\t\t\n\t\n     \t \t\t  \n\t\n     \t     \n\t\n     \t\t\t \t\t\t\n\t\n     \t\t \t\t\t\t\n\t\n     \t\t\t  \t \n\t\n     \t\t \t\t  \n\t\n     \t\t  \t  \n\t\n     \t    \t\n\t\n  \n\n\n"
                    },
                    {
                      "format": "plain",
                      "description": "a message for the gods",
                      "permission": "zeus"
                    },
                    {
                      "format": "traceback",
                      "description": "too lazy to forge one"
                    }
                  ]
                },
                {
                  "accepted": false,
                  "data": {},
                  "expected": "a satisfying life",
                  "generated": "existential angst"
                },
                {
                  "accepted": true,
                  "data": {},
                  "description": "test whether the user can XSS",
                  "expected": "<script>alert('Your mother was a hamster and your father smelt of elderberries.')</script>",
                  "generated": "<script>alert('Your mother was a hamster and your father smelt of elderberries.')</script>"
                },
                {
                  "accepted": true,
                  "data": {
                    "diff": [
                      [
                        "",
                        "",
                        "euh\nagh\negh",
                        "blegh\nugh\nmeh\npuh"
                      ]
                    ]
                  }
                }
              ]
            },
            {
              "accepted": true,
              "data": {
                "files": [
                  {
                    "location": "href",
                    "content": "https://een-link.be"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "description": "another tab",
      "data": {},
      "groups": [
        {
          "accepted": false,
          "groups": [
            {
              "accepted": false,
              "tests": [
                {
                  "accepted": false,
                  "data": {},
                  "description": "test whether user is screaming",
                  "expected": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                  "generated": "meh"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "accepted": true,
      "description": "source annotations",
      "data": {
        "source_annotations": [
          {
            "line": 1,
            "column": 0,
            "description": "there is a problem here"
          },
          {
            "line": 2,
            "column": 0,
            "description": "there is a problem here",
            "type": "warning"
          },
          {
            "line": 3,
            "column": 0,
            "description": "there is a problem here",
            "type": "fatal"
          },
          {
            "line": 4,
            "column": 0,
            "description": "there is a problem here",
            "type": "error"
          },
          {
            "line": 5,
            "column": 0,
            "description": "there is a problem here",
            "type": "refactor"
          },
          {
            "line": 6,
            "column": 0,
            "description": "there is a problem here",
            "type": "convention"
          },
          {
            "line": 7,
            "column": 0,
            "description": "ok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\nok\n"
          }
        ]

      }
    }
  ]
}
